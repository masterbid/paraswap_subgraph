type Account @entity {
  id: ID! #<accountAddress>
  address: Bytes!
  buys: [Bought!]! @derivedFrom(field: "initiator")
  swaps: [Swap!]! @derivedFrom(field: "initiator")
  swapsOnUniswap: [swapOnUniswap!]! @derivedFrom(field: "initiator")
  swapsOnUniswapFork: [swapOnUniswapFork!]! @derivedFrom(field: "initiator")
  buysOnUniswap: [buyOnUniswap!]! @derivedFrom(field: "initiator")
  buysOnUniswapFork: [buyOnUniswapFork!]! @derivedFrom(field: "initiator")
}

type Token @entity {
  id: ID!
  address: Bytes! #<Token address>
  decimals: Int #<Number of decimals the token uses>
  name: String #<Human-readable name of the token>
  symbol: String #<Symbol of the token>
  totalSupply: BigDecimal #<Total token supply>
}

type Bought @entity {
  id: ID! #<Transaction Hash>
  initiator: Account! #<Transaction initiator account>
  beneficiary: Account! #<Transaction beneficiary account>
  srcToken: Token! #<Token used for purchase>
  destToken: Token! #<Token received after purchase>
  srcAmount: BigDecimal! #<Amount used for purchase>
  receivedAmount: BigDecimal! #<Amount received after purchase>
  referrer: String! #<Referrer info>
  timestamp: BigInt! #<Timestamp of the transaction>
  transaction: Bytes! #<hash of the transaction>
}

type Swap @entity {
  id: ID! #<Transaction Hash>
  initiator: Account! #<Transaction initiator account>
  beneficiary: Account! #<Transaction beneficiary account>
  srcToken: Token! #<Token used for swap>
  destToken: Token! #<Token received after swap>
  srcAmount: BigDecimal! #<Amount used for purchase>
  receivedAmount: BigDecimal! #<Amount received after swap>
  expectedAmount: BigDecimal! #<Amount expected from swap>
  referrer: String! #<Referrer info>
  timestamp: BigInt! #<Timestamp of the transaction>
  transaction: Bytes! #<hash of the transaction>
}

type Fee @entity {
  id: ID! #<Transaction Hash>
  transaction: Bytes! #<Hash of the transaction>
  feeWallet: Account! #<Fee wallet account>
  patner: Account #<Partners wallet account>
  fee: BigDecimal! #<Fee decduction>
  partnerShare: BigDecimal! #<Partner share of the fee>
  paraswapShare: BigDecimal! #<Paraswap share of the fee>
  timestamp: BigInt! #<Timestamp when take fee transaction>
}

type swapOnUniswap @entity {
  id: ID! #<>
  initiator: Account! #<>
  amountIn: BigDecimal! #<>
  amountOutMin: BigDecimal! #<>
  path: [Bytes!] #<>
  referrer: Int! #<>
  timestamp: BigInt! #<>
  transaction: Bytes! #<>
  block: BigInt! #<>
}

type swapOnUniswapFork @entity {
  id: ID! #<>
  initiator: Account! #<>
  factory: Token! #<>
  initCode: Bytes! #<>
  amountIn: BigDecimal! #<>
  amountOutMin: BigDecimal! #<>
  path: [Bytes!] #<>
  referrer: Int! #<>
  timestamp: BigInt! #<>
  transaction: Bytes! #<>
  block: BigInt! #<>
}

type buyOnUniswap @entity {
  id: ID! #<>
  initiator: Account! #<>
  amountInMax: BigDecimal! #<>
  amountOut: BigDecimal! #<>
  path: [Bytes!] #<>
  referrer: Int! #<>
  timestamp: BigInt! #<>
  transaction: Bytes! #<>
  block: BigInt! #<>
}

type buyOnUniswapFork @entity {
  id: ID! #<>
  initiator: Account! #<>
  factory: Token! #<>
  initCode: Bytes! #<>
  amountInMax: BigDecimal! #<>
  amountOut: BigDecimal! #<>
  path: [Bytes!] #<>
  referrer: Int! #<>
  timestamp: BigInt! #<>
  transaction: Bytes! #<>
  block: BigInt! #<>
}

